project-name: my-project 
data_sources:
	- kind: eth_rpc
		url: https://eth.rpc.alchemy.example/MY_TOKEN
	- kind: dune
		token: my_dune_token
	- kind: hypersync
		token: my_hypersync_token
data_sink:
	- kind: local_duckdb
		path: /my/path
		sql_schema_path: /my_schema.sql # code generator can use this for generating
																			# mapping function output types
streams: # specify a list of streams
				 # each stream has it's own data mapping function defined by the user
	- kind: block # process block data
		include_transactions: true # include all transactions for all blocks
		include_logs: false # don't include logs
		column_cast:
			transaction:
				value: "String"
				l1_block_number: "Float64"
		hex_encode:
			transaction: "Prefixed"
			block: null
			log: "HexEncode"
		hash: [] # process all blocks regardless of hash
		mapping: "polars" # code generator will generate the mapping signature accordingly
	- kind: event
		signatue: Transfer(address indexed token0, address indexed token1, bool indexed stable, address pool, uint256 length)
		topics: [] # extra topic filters
		address: [] # extra address filters
		include_blocks: true # include associated block data
		include_transactions: false
		include_traces: false
		mapping: "pandas"
	- kind: event
		signatue: Transfer(address indexed from, address indexed to, uint256 amount)
		topics: [] # extra topic filters
		address: [my_erc20_address] # extra address filters
		include_blocks: false 
		include_transactions: true # include associated tx data
		include_traces: false
		mapping: "python" # map with regular typed python objects.
											# types will be generated by the code generator
	- kind: trace
		from: [my_addr1, my_addr2] # process traces coming from these addresses
		to: [] # process traces going to any address
		trace_kind: "create" # only process contract creation traces
		mapping: 'polars'
	- kind: dune
		table: "my_pre-processed_dune_table"
		mapping: 'polars'